package com.sakhalinec.dagger2startdi.example1

// просто для примера, проецируем типа эта реальная активити с экраном
class Activity {

    /*
        Если для работы класса нужен другой объект то, значит этот класс зависит
        от создаваемого класса, а создаваемый класс является зависимостью данного класса

        Если классу нужно использовать зависимости то не нужно создавать эти зависимости
        внутри самого класса, все эти зависимости должны быть доставленны откуда то снаружи и
        лучший способ сделать это:
            первый способ и наиболее предпочтительный при возможности передать в качестве
            параметра в конструктор
            второй способ это внедрение зависимостей через поля например lateinit var computer: Computer



    */

    // внедрение зависимостей в поля объекта
    // способ не очень хороший потому что Activity сама запрашивает зависимость у Component-a
    // val computer: Computer = Component().getComputer()

    // внедрение зависимостей в поля объекта
    // поле переменной обязательно должно быть публичным, чтобы можно было иметь к ней доступ
    // при внедренни зависимости
    lateinit var computer: Computer
    lateinit var keyboard: Keyboard

    // в реальной Activity вызов функции inject() был бы в методе onCreate() тут для примера init
    // таким образом мы не запрашиваем зависимости у Component-а, а говорим Component-у добавь
    // все ноебходимые зависимости в данный класс
    init {
        Component().inject(this)
    }


}

